# Optional, valid values are jdbc (default) and in-memory
job-repository-type = jdbc

# Optional, default is jdbc:h2:~/jberet-repo
db-url = jdbc:h2:~/jberet-repo
db-user =
db-password =
db-properties =

## To use a different DBMS, specify db-related properties, including db-url and ddl-file.
## ddl-file specifies the location of job repository ddl file resource, loadable by jberet class loader.
## Its default value is sql/jberet-h2.ddl, which is included in jberet-core-<version>.jar, along with some
## other common DBMS ddl files.  ddl-file must be specified if any non-default db-url is used.
## Non-default JDBC driver jars should also be included in classpath.

# derby network server or derby embedded:
# db-url = jdbc:derby://localhost:1527/jberet;create=true
# db-url = jdbc:derby:derbyDB;create=true
# ddl-file = sql/jberet-derby.ddl

# mysql
# db-url = jdbc:mysql://localhost:3306/test
# ddl-file = sql/jberet-mysql.ddl
# db-user = root
# db-password =

# postgresql
# db-url = jdbc:postgresql://localhost:5432/postgres
# ddl-file = sql/jberet-postgresql.ddl
# db-user = postgres
# db-password =

## All thread-related properties are optional. Some properties may not apply to certain types of thread-pool and may be
## ignored. For more details, please see http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html

# Valid values are Cached, Fixed, Configured, and the default is Cached.
# Cached: java.util.concurrent.Executors.newCachedThreadPool method is invoked to create executor.
#         thread-factory property may be specified and all other thread-related properties are ignored.
#
# Fixed: java.util.concurrent.Executors.newFixedThreadPool method is invoked to create executor.
#        thread-factory and thread-pool-core-size properties may be specified and all other thread-related properties
#        are ignored.
#
# Configured: java.util.concurrent.ThreadPoolExecutor is created with thread-related properties as parameters.
thread-pool-type =

# New tasks are serviced first by creating core threads.
# Required for Configured type.
thread-pool-core-size =

# If all core threads are busy, new tasks are queued.
# int number indicating the size of the work queue. If 0 or negative, a java.util.concurrent.SynchronousQueue is used.
# Required for Configured type.
thread-pool-queue-capacity =

# If queue is full, additional non-core threads are created to service new tasks.
# int indicating the maximum size of the thread pool.
# Required for Configured type.
thread-pool-max-size =

# long number indicating the number of seconds a thread can stay idle.
# Required for Configured type.
thread-pool-keep-alive-time =

# Optional, valid values are true and false, defaults to false.
thread-pool-allow-core-thread-timeout =

# Optional, valid values are true and false, defaults to false.
thread-pool-prestart-all-core-threads =

# Optional, fully-qualified name of a class that implements java.util.concurrent.ThreadFactory.
# This property should not be needed in most cases.
thread-factory =

# Optional, fully-qualified name of a class that implements java.util.concurrent.RejectedExecutionHandler.
# This property should not be needed in most cases.
thread-pool-rejection-policy =
